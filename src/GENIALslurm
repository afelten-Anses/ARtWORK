#!/global/conda/envs/genial_db/bin/python
# -*- coding: utf-8 -*-

import os, sys, time
import argparse
import re
import subprocess
import pymongo
from pymongo import MongoClient

def get_parser() :
	# Fonction permettant de pourvoir demander des arguments

	parser = argparse.ArgumentParser(description= \
		"Find ARM, virulence and toxin genes running ABRicate", \
			formatter_class=argparse.ArgumentDefaultsHelpFormatter)

	parser.add_argument("-nas", action="store", dest="nas", 
					type=str, default="/global/bio", help="NAS assembly point")

	parser.add_argument("-w", action="store", dest="workdir", type=str, default=".", help="working directory")

	#parser.add_argument("-r", action="store", dest="resdir", 
	#					type=str, default="abricateResults", help="results directory name")
		
	parser.add_argument("-T", action="store", dest="nbThreads", type=str, default='1', help="number of theard to use")
	
	parser.add_argument('-Mu', action="store", dest='MongoUser', 
						type=str, required=True, help='MongoDb username (REQUIRED)')
	
	parser.add_argument('-Mp', action="store", dest='MongoPassword', 
						type=str, required=True, help='MongoDb password (REQUIRED)')

	parser.add_argument("-strainid", action="store", dest="strainid", type=str, nargs='+', default="", help="strains'ID ")

	#parser.add_argument("--overwitedb", action="store_true", dest="overwitedb", default=False, help="overwrite infos in the database")

	parser.add_argument("--new_analysis", action="store_true", dest="newAnalysis", default=False, \
		help="update informations throwing again the analysis for all strains (incompatible with -strainid)")
	

	return parser

class genome(object) :

	def __init__(self) :
		self.ID = ""
		self.fastaFile = ""
		self.genre = ""


	def setID(self, ID) :
		self.ID = ID


	def setFastaFile(self, fastaFile) :
		self.fastaFile = fastaFile

	def setGenre(self, genre) :
		self.genre = genre


def getAllGenomesObjects(dicoGenomes, MongoUser, MongoPassword, nas, ID = None, newAnalysis = False) :
	uri = "mongodb://" + MongoUser + ":" + MongoPassword + "@sas-vp-lsdb1/GAMeRdb"
	client = MongoClient(uri)

	db = client.GAMeRdb
	genomes = db.GENOME


	if ID is None : 
		infos = genomes.find()	
		#infos = genomes.find({"Phylogeny.Genus":"Salmonella"})
	
	else : 
		infos = genomes.find({"SampleID":ID})
	

	for info in infos :

		if not newAnalysis :
			genesCollection = genomes.find({"SampleID":info['SampleID']},{"Gene":1,"_id":0})

			for element in genesCollection :
				if element == {} :
					dicoGenomes[info['SampleID']] = genome()
					dicoGenomes[info['SampleID']].setID(info['SampleID'])
					dicoGenomes[info['SampleID']].setFastaFile(info['Genome']['Assembly'].replace('DATA',nas + 'data'))
					dicoGenomes[info['SampleID']].setGenre(info['Phylogeny']['Genus'])

		else :
			dicoGenomes[info['SampleID']] = genome()
			dicoGenomes[info['SampleID']].setID(info['SampleID'])
			dicoGenomes[info['SampleID']].setFastaFile(info['Genome']['Assembly'].replace('DATA',nas + 'data'))
			dicoGenomes[info['SampleID']].setGenre(info['Phylogeny']['Genus'])



def makeGenialInputFile(fastaPath, ID, genomeDir) : 
	inputFileName = genomeDir + "GENIAL_input.tsv"
	inputFile = open(inputFileName, "w")

	inputFile.write(fastaPath + "\t" + ID + "\n") 

	inputFile.close()

	return inputFileName


# fonction qui crée un fichier sbatch et le lance
'''
def genialSlurm(sbatchName, genialCmd, dependencies="", condaEnv = "genial_db", nbThreads = 1, sync = 0) :
	sbatchFile = open(sbatchName, "w")

	sbatchFile.write("#!/bin/bash\n")
	sbatchFile.write("#SBATCH -J " + os.path.splitext(os.path.basename(sbatchName))[0] + "\n")

	if sync != 0 :
		sbatchFile.write("#SBATCH -W\n")

	sbatchFile.write("#SBATCH --cpus-per-task=" + str(nbThreads) + "\n")
	sbatchFile.write("#SBATCH -o %x.%N.%j.out" + "\n")
	sbatchFile.write("#SBATCH -e %x.%N.%j.err" + "\n")
	sbatchFile.write("#SBATCH -p Research\n")

	sbatchFile.write("source /global/conda/bin/activate\n")
	sbatchFile.write("conda activate\n")
	sbatchFile.write("conda activate " + condaEnv + "\n\n")

	sbatchFile.write(str(genialCmd) + "\n")

	sbatchFile.close()

	slurm_cmd=["sbatch " , dependencies ,  ' ' + sbatchName]
	print(slurm_cmd)
	return(re.findall(r'\d+',subprocess.check_output("".join(slurm_cmd), shell=True))[0])
'''


def genialSlurm(name,cmd,dependencies="",conda_env="genial_db",nbThreads=1,sync=0,mem=0 ):

	sbash_file = name.replace('./','')
	nbThreads = int(nbThreads)
	with open(sbash_file,"w") as file:
		file.write("#!/bin/bash\n")
		file.write("#SBATCH -J "+ os.path.splitext(os.path.basename(name))[0]+"\n")
		if mem!=0:
			file.write("#SBATCH --mem="+str(mem)+"\n")
		if sync!=0:
			file.write("#SBATCH -W\n")
		if nbThreads>=0:
			file.write("#SBATCH --cpus-per-task="+str(nbThreads)+"\n")
		else:
			file.write("#SBATCH --cpus-per-task=1\n")
		file.write("#SBATCH -o %x.%N.%j.out"+"\n")
		file.write("#SBATCH -e %x.%N.%j.err"+"\n")
		file.write("#SBATCH -p Production\n")
		if conda_env:
			file.write("source /global/conda/bin/activate\nconda activate\nconda activate "+str(conda_env)+"\n\n")
		file.write("\n")
		file.write(str(cmd)+"\n")
		file.flush()
		file.close()
	slurm_cmd=['sbatch ', dependencies, " "+os.getcwd()+"/"+sbash_file]
	os.system("echo "+"".join(slurm_cmd) +" >> " + os.path.splitext(sbash_file)[0] + ".log" )
	#print("".join(slurm_cmd))
	#os.system("".join(slurm_cmd))
	#toto = subprocess.check_output("".join(slurm_cmd), shell=True)
	#print("---> "  + str(toto))
	#return(re.findall(r'\d+',subprocess.check_output(['ls', '-l'])))
	return(re.findall(r'\d+',str(subprocess.check_output("".join(slurm_cmd), shell=True)))[0])


def runGENIAL(dicoGenomes, nas, nbThreads, workdir, resdir, MongoUser, MongoPwd) :

	if not os.path.exists(workdir + resdir) : # création du répertoire de toutes les souches
			os.system("mkdir " + workdir + resdir)

	jobIds = [] # id des jobs slurm
	
	for genome in dicoGenomes : # pour chaque génome
		
		# nom du répertoire de la souche
		genomeDir = workdir + resdir + "GENIALslurm_" + dicoGenomes[genome].ID + "/" 
		
		# création du répertoire de la souche
		if not os.path.exists(genomeDir) : 
			os.system("mkdir " + genomeDir) 
		
		# chemin du fichier fasta
		fastaPath = dicoGenomes[genome].fastaFile 
		# création du fichier d'entrée de GENIAL
		inputFile = makeGenialInputFile(fastaPath, genome, genomeDir) 
		
		 # liste des fichier sbatch (1 part base de donnés)
		sbatchFiles = []
		
		# commande resfinder
		resfinderCmd = "GENIALanalysis -f " + inputFile + " -defaultdb resfinder -T " + nbThreads + \
		" -w " + genomeDir + " -r resfinder --no_GENIALresult_file" 
		# ajout du fichier à la liste des sbatch
		sbatchFiles.append(genomeDir + dicoGenomes[genome].ID + "_resfinder.sh") 

		# commande vfdb
		vfdbCmd = "GENIALanalysis -f " + inputFile + " -defaultdb vfdb -T " + nbThreads + " -w " + \
		genomeDir + " -r vfdb --no_GENIALresult_file" 
		# ajout du fichier à la liste des sbatch
		sbatchFiles.append(genomeDir + dicoGenomes[genome].ID + "_vfdb.sh") 
		
		if dicoGenomes[genome].genre == "Staphylococcus" :
			# commande enterotox_staph
			enterotoxCmd = "GENIALanalysis -f " + inputFile + " -defaultdb enterotox_staph -T " + \
			nbThreads + " -w " + genomeDir + " -r enterotox_staph --no_GENIALresult_file" 
			# ajout du fichier à la liste des sbatch
			sbatchFiles.append(genomeDir + dicoGenomes[genome].ID + "_enterotox.sh") 


		if dicoGenomes[genome].genre == "Salmonella" :
			# commande enterotox_staph
			spiCmd = "GENIALanalysis -f " + inputFile + " -defaultdb spi -T " + \
			nbThreads + " -w " + genomeDir + " -r spi --no_GENIALresult_file" 
			# ajout du fichier à la liste des sbatch
			sbatchFiles.append(genomeDir + dicoGenomes[genome].ID + "_spi.sh") 
		
		# ajout id du job resfinder
		jobIds.append(genialSlurm(sbatchFiles[0], resfinderCmd, nbThreads = nbThreads)) 
		# ajout id du job vfdb
		jobIds.append(genialSlurm(sbatchFiles[1], vfdbCmd, nbThreads = nbThreads)) 
		
		if dicoGenomes[genome].genre == "Staphylococcus" :
			# ajout id du job enterotox_staph
			jobIds.append(genialSlurm(sbatchFiles[2], enterotoxCmd, nbThreads = nbThreads)) 

		if dicoGenomes[genome].genre == "Salmonella" :
			# ajout id du job enterotox_staph
			jobIds.append(genialSlurm(sbatchFiles[2], spiCmd, nbThreads = nbThreads)) 
		
	
	# job vide pour que le programme attende la fin des jobs
	genialSlurm("empty", "echo Finish", dependencies = "--dependency=afterok:" + ":".join(jobIds), sync = 1)	

	for genome in dicoGenomes : 
	
		# déplacer le fichier arbicate dans le nas
		os.mkdir(nas + "data/GAMeR_DB/" + dicoGenomes[genome].genre.upper() + '/' + dicoGenomes[genome].ID + "/ABRicate")
		finaldir = nas + "data/GAMeR_DB/" + dicoGenomes[genome].genre.upper() + '/' + dicoGenomes[genome].ID + "/ABRicate/."
		genial_output_dir = workdir + resdir + "GENIALslurm_" + dicoGenomes[genome].ID + "/"
		
		resfinder_file = genial_output_dir + "resfinder/Analysis_files/" + \
		"GENIAL_" + dicoGenomes[genome].ID + "_resfinder.tsv"
		os.system("mv " + resfinder_file + ' ' + finaldir)
		new_resfinder_file = "DATA/GAMeR_DB/" + dicoGenomes[genome].genre.upper() + '/' + dicoGenomes[genome].ID + \
		"/ABRicate/" +  "GENIAL_" + dicoGenomes[genome].ID + "_resfinder.tsv"
		insertMongo(MongoUser, MongoPwd, "resfinder", new_resfinder_file,  dicoGenomes[genome].ID)
		
		vfdb_file =  genial_output_dir + "vfdb/Analysis_files/" + \
		"GENIAL_" + dicoGenomes[genome].ID + "_vfdb.tsv"
		os.system("mv " + vfdb_file + ' ' + finaldir)
		new_vfdb_file = "DATA/GAMeR_DB/" + dicoGenomes[genome].genre.upper() + '/' + dicoGenomes[genome].ID + \
		"/ABRicate/" +  "GENIAL_" + dicoGenomes[genome].ID + "_vfdb.tsv"
		insertMongo(MongoUser, MongoPwd, "vfdb", new_vfdb_file,  dicoGenomes[genome].ID)
		
		if dicoGenomes[genome].genre == "Staphylococcus" :
			enterotox_file = genial_output_dir + "enterotox_staph/Analysis_files/" + \
			"GENIAL_" + dicoGenomes[genome].ID + "_enterotox_staph.tsv"
			os.system("mv " + enterotox_file + ' ' + finaldir)
			new_enterotox_file = "DATA/GAMeR_DB/" + dicoGenomes[genome].genre.upper() + '/' + dicoGenomes[genome].ID + \
			"/ABRicate/" +  "GENIAL_" + dicoGenomes[genome].ID + "_enterotox_staph.tsv"
			insertMongo(MongoUser, MongoPwd, "enterotox_staph", new_enterotox_file,  dicoGenomes[genome].ID)

		if dicoGenomes[genome].genre == "Salmonella" :
			spi_file = genial_output_dir + "spi/Analysis_files/" + \
			"GENIAL_" + dicoGenomes[genome].ID + "_spi.tsv"
			os.system("mv " + spi_file + ' ' + finaldir)
			new_spi_file = "DATA/GAMeR_DB/" + dicoGenomes[genome].genre.upper() + '/' + dicoGenomes[genome].ID + \
			"/ABRicate/" +  "GENIAL_" + dicoGenomes[genome].ID + "_spi.tsv"
			insertMongo(MongoUser, MongoPwd, "spi", new_spi_file,  dicoGenomes[genome].ID)
		

	# Suppression du dossier avec le résultat de toute sles souches
	os.system("rm -r empty empty.log  " + workdir + resdir) 


def insertMongo(MongoUser, MongoPwd, db_name, gene_file, strainid):
	
	uri = "mongodb://" + MongoUser + ":" + MongoPwd + "@sas-vp-lsdb1/GAMeRdb"
	client = MongoClient(uri)

	db = client.GAMeRdb
	genomes = db.GENOME
	
	genomes.update({"SampleID":strainid}, {'$set':{'Gene.'+db_name:gene_file}})
	
	

def main():
	
	##################### gets arguments #####################

	parser=get_parser()
	
	#print parser.help if no arguments
	if len(sys.argv)==1:
		parser.print_help()
		sys.exit(1)
	
	# mettre tout les arguments dans la variable Argument
	Arguments=parser.parse_args()

	if Arguments.newAnalysis and (Arguments.strainid is not None) : # Vérification que les arguments -dbp et-dbf sont bien présents si la base de donées choisie est privée
		 parser.error("-strainid is incomatible with --new_analysis")


	WORKDIR = Arguments.workdir
	RESDIR = "GENIALslurm_results/"
	#DIR = WORKDIR + RESDIR 

	dicoGenomes = {}

	if Arguments.nas[-1] != "/" :
		Arguments.nas += "/"

	if WORKDIR[-1] != "/" :
		WORKDIR += "/"

	if Arguments.newAnalysis :
		getAllGenomesObjects(dicoGenomes, MongoUser, MongoPassword, nas, newAnalysis = True)

	else :
		if Arguments.strainid is "" :
			getAllGenomesObjects(dicoGenomes, Arguments.MongoUser, Arguments.MongoPassword, Arguments.nas)
			'''
			dicoGenomes["XSD0471"] = genome()
			dicoGenomes["XSD0471"].setID("XSD0471")
			dicoGenomes["XSD0471"].setFastaFile(Arguments.nas + "data/GAMeR_DB/SALMONELLA/XSD0471/XSD0471_contigs.fasta")
			dicoGenomes["XSD0471"].setGenre("Salmonella")
			'''

		else : 
			for strain in Arguments.strainid :
				getAllGenomesObjects(dicoGenomes, Arguments.MongoUser, Arguments.MongoPassword, Arguments.nas , ID = strain)
			'''
			print(dicoGenomes.keys())
			print(dicoGenomes[Arguments.strainid].ID)
			print(dicoGenomes[Arguments.strainid].fastaFile)
			print(dicoGenomes[Arguments.strainid].genre)
			'''
	
			if len(dicoGenomes.keys()) == 0 :
				exit()

	runGENIAL(dicoGenomes, Arguments.nas, Arguments.nbThreads, WORKDIR, RESDIR, Arguments.MongoUser, Arguments.MongoPassword)


		

# lancer la fonction main()  au lancement du script
if __name__ == "__main__":
	main()	
